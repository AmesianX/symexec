#include "llvm/Pass.h"
#include "llvm/Function.h"
#include "llvm/Support/raw_ostream.h"

#include "llvm/Support/InstIterator.h"

#include "llvm/Type.h"
#include "llvm/DerivedTypes.h"
#include "llvm/Constants.h"

#include <sstream>
#include <string>
#include <iostream>

using namespace llvm;
using namespace std;

namespace {
struct MaximallySharedGraph: public FunctionPass {

	static char ID;
	MaximallySharedGraph() :
			FunctionPass(ID) {
	}

	Instruction& findRet(Function &F) {
		for (inst_iterator I = inst_begin(F), E = inst_end(F); I != E; ++I) {
			unsigned Opcode = I->getOpcode();
			if (Opcode == Instruction::Ret)
				return *I;
		}
	}

	// Postorder traverse of a tree
	void print_inst_spear(Instruction& inst) {

		// Print the operands' definitions fist and recursively.
		for (User::op_iterator i = inst.op_begin(), e = inst.op_end(); i != e;
				++i) {
			if (Instruction * sub_inst = dyn_cast<Instruction>(*i)) {
				print_inst_spear (*sub_inst);
			}
		}

		if(inst.getOpcode() == Instruction::Ret) return;

		errs() << "c ";

		// Print the return variable's name.
		if (inst.hasName())
			errs() << inst.getName() << " ";

		// Print the operator's name.
		errs() << inst.getOpcodeName() << " ";

		// Print each operand: a variable name or a constant with type.
		for (User::op_iterator i = inst.op_begin(), e = inst.op_end(); i != e;
				++i) {
			Value *v = *i;

			if (v->hasName())
				errs() << v->getName();

			if (v->getValueID() == Value::ConstantIntVal)
				errs() << cast<ConstantInt>(v)->getValue() << ":i"
						<< inst.getType()->getIntegerBitWidth() << " ";

		}
		errs() << "\n";
	}

	// Postorder traverse of a tree
	void print_variables_spear(Instruction& inst) {
		for (User::op_iterator i = inst.op_begin(), e = inst.op_end(); i != e;
				++i) {
			if (Instruction * sub_inst = dyn_cast<Instruction>(*i)) {
				print_variables_spear (*sub_inst);
			}
		}

		if (inst.hasName()) {
			errs() <<inst.getName();
			if (inst.getType()->getTypeID() == Type::IntegerTyID)
				errs() << ":i" << inst.getType()->getIntegerBitWidth()
						<< " ";
		}
		errs() << " ";
	}

	void print_spear(Instruction& retI) {
		errs() << "# Should print the IR file's name here." << "\n";
		errs() << "v 1.0" << "\n";
		errs() << "d ";
		print_variables_spear(retI);
		errs() << " # Variable declarations" << "\n";
		print_inst_spear(retI);
		errs() << "p = tmp 0:i32" << "\n";

	}


	void IR_map_Spear(unsigned Opcode){
		switch (Opcode):{
		case Instruction::ADD: break;
		}
	}

	virtual bool runOnFunction(Function &F) {
		errs() << "MaximallySharedGraph: \n";
		Instruction& retI = findRet(F);
		print_spear(retI);

		return false;
	}
};
}

char MaximallySharedGraph::ID = 0;
static RegisterPass<MaximallySharedGraph> X("maximally-shared-graph",
		"MaximallySharedGraph World Pass", false, false);
